メリット②
スライドの文章の通り、型の情報がコードとして記載されるためコードを読み解く手がかりとして大きく機能します。
これを自己文書化といい、自身が設定したデータの正体を理解しながらコードを書くことができます。
これによってスムーズな開発を行うことができます。
エディタ側でのコードの補完もサポートしているためその点でも開発体験の向上に寄与しているといえます。



関数について
functionの後に関数名を宣言する記法と関数を変数に代入して使用する関数式の二通りで記述できます。
JSでもおなじみの記法ですね。
引数と返り値に型がついている点でJSとは違います。
書きやすい記法で書けばよいと思いますが、個人的には関数式で書くのが一般的なイメージです。



Typeとはなんなのか
それは型エイリアスという概念で型や型の集合に特別な名前を付ける機能です。
個人が認識しやすい名前で型を定義することができます。


次にInterfaceです。
これはTypeと似ていて、オブジェクト形式で特別な型を定義できます。使用される場面もほとんど同じですが、仕様に若干の違いがあります。
次のスライドで確認していきます。